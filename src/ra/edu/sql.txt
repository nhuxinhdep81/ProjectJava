CREATE DATABASE IF NOT EXISTS course_management_system;
USE course_management_system;

-- Tạo bảng admin
CREATE TABLE admin (
                       id INT PRIMARY KEY AUTO_INCREMENT,
                       username VARCHAR(50) NOT NULL UNIQUE,
                       password VARCHAR(255) NOT NULL
);

-- Tạo bảng student
CREATE TABLE student (
                         student_id INT PRIMARY KEY AUTO_INCREMENT,
                         name VARCHAR(100) NOT NULL,
                         dob DATE NOT NULL,
                         email VARCHAR(100) NOT NULL UNIQUE,
                         sex BIT NOT NULL,
                         phone VARCHAR(20),
                         password VARCHAR(255) NOT NULL,
                         create_at DATE DEFAULT (CURRENT_DATE),
                         isActived BIT DEFAULT 1
);

-- Tạo bảng course
CREATE TABLE course (
                        course_id INT PRIMARY KEY AUTO_INCREMENT,
                        name VARCHAR(100) NOT NULL,
                        duration INT NOT NULL,
                        instructor VARCHAR(100) NOT NULL,
                        create_at DATE DEFAULT (CURRENT_DATE)
);

-- Tạo bảng enrollment
CREATE TABLE enrollment (
                            id INT PRIMARY KEY AUTO_INCREMENT,
                            student_id INT NOT NULL,
                            course_id INT NOT NULL,
                            registered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            status ENUM('waiting', 'denied', 'cancel', 'confirm') DEFAULT 'waiting',
                            FOREIGN KEY (student_id) REFERENCES student(student_id),
                            FOREIGN KEY (course_id) REFERENCES course(course_id)
);

DELIMITER //

-- Stored Procedures cho đăng nhập

CREATE PROCEDURE check_admin_login(
    IN p_username VARCHAR(50),
    IN p_password VARCHAR(255)
)
BEGIN
    SELECT id, username, password
    FROM admin
    WHERE username = p_username AND password = p_password;
END //

CREATE PROCEDURE check_student_login(
    IN p_email VARCHAR(100),
    IN p_password VARCHAR(255)
)
BEGIN
    SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived
    FROM student
    WHERE email = p_email AND password = p_password AND isActived = 1;
END //

-- Stored Procedures cho Student

CREATE PROCEDURE register_student(
    IN p_name VARCHAR(100),
    IN p_dob DATE,
    IN p_email VARCHAR(100),
    IN p_sex BIT,
    IN p_phone VARCHAR(20),
    IN p_password VARCHAR(255),
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    -- Chèn học viên mới
    INSERT INTO student (name, dob, email, sex, phone, password, create_at, isActived)
    VALUES (p_name, p_dob, p_email, p_sex, NULLIF(p_phone, ''), p_password, CURDATE(), 1);

    IF ROW_COUNT() > 0 THEN
        SET p_success = 1;
        SET p_message = 'Đăng ký học viên thành công.';
    ELSE
        SET p_success = 0;
        SET p_message = 'Có lỗi xảy ra khi đăng ký học viên.';
    END IF;
END //

CREATE PROCEDURE get_all_students()
BEGIN
    SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived
    FROM student
    WHERE isActived = 1;
END //

CREATE PROCEDURE get_students_pagination(
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived
    FROM student
    WHERE isActived = 1
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE add_student(
    IN p_name VARCHAR(100),
    IN p_dob DATE,
    IN p_email VARCHAR(100),
    IN p_sex BIT,
    IN p_phone VARCHAR(20),
    IN p_password VARCHAR(255),
    IN p_create_at DATE,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    -- Chèn học viên mới
    INSERT INTO student (name, dob, email, sex, phone, password, create_at, isActived)
    VALUES (p_name, p_dob, p_email, p_sex, NULLIF(p_phone, ''), p_password, p_create_at, 1);

    IF ROW_COUNT() > 0 THEN
        SET p_success = 1;
        SET p_message = 'Thêm học viên thành công.';
    ELSE
        SET p_success = 0;
        SET p_message = 'Có lỗi xảy ra khi thêm học viên.';
    END IF;
END //

CREATE PROCEDURE update_student(
    IN p_student_id INT,
    IN p_name VARCHAR(100),
    IN p_dob DATE,
    IN p_email VARCHAR(100),
    IN p_sex BIT,
    IN p_phone VARCHAR(20),
    IN p_password VARCHAR(255),
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem học viên có tồn tại và đang hoạt động không
    SELECT COUNT(*) INTO v_count
    FROM student
    WHERE student_id = p_student_id;

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Học viên không tồn tại.';
    ELSE
        -- Cập nhật thông tin học viên
        UPDATE student
        SET name = p_name,
            dob = p_dob,
            email = p_email,
            sex = p_sex,
            phone = NULLIF(p_phone, ''),
            password = p_password
        WHERE student_id = p_student_id;

        IF ROW_COUNT() > 0 THEN
            SET p_success = 1;
            SET p_message = 'Cập nhật học viên thành công.';
        ELSE
            SET p_success = 0;
            SET p_message = 'Có lỗi xảy ra khi cập nhật học viên.';
        END IF;
    END IF;
END //

CREATE PROCEDURE find_student_by_id(
    IN p_student_id INT
)
BEGIN
    SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived
    FROM student
    WHERE student_id = p_student_id;
END //

CREATE PROCEDURE delete_student(
    IN p_student_id INT,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem sinh viên có tồn tại và đang hoạt động không
    SELECT COUNT(*) INTO v_count
    FROM student
    WHERE student_id = p_student_id AND isActived = 1;

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Không tìm thấy học viên với ID được chỉ định hoặc học viên đã bị vô hiệu hóa.';
    ELSE
        -- Kiểm tra xem học viên có đơn đăng ký không
        SELECT COUNT(*) INTO v_count
        FROM enrollment
        WHERE student_id = p_student_id;

        IF v_count > 0 THEN
            SET p_success = 0;
            SET p_message = 'Học viên đã đăng ký khóa học, không thể vô hiệu hóa.';
        ELSE
            -- Cập nhật trạng thái isActived thành 0
            UPDATE student
            SET isActived = 0
            WHERE student_id = p_student_id;

            IF ROW_COUNT() > 0 THEN
                SET p_success = 1;
                SET p_message = 'Vô hiệu hóa học viên thành công.';
            ELSE
                SET p_success = 0;
                SET p_message = 'Có lỗi xảy ra khi vô hiệu hóa học viên.';
            END IF;
        END IF;
    END IF;
END //

CREATE PROCEDURE search_students_by_name_email_id_pagination(
    IN p_search_value VARCHAR(100),
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived
    FROM student
    WHERE isActived = 1
      AND (name LIKE CONCAT('%', p_search_value, '%')
        OR email LIKE CONCAT('%', p_search_value, '%')
        OR student_id = IF(p_search_value REGEXP '^[0-9]+$', CAST(p_search_value AS UNSIGNED), NULL))
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE sort_students_pagination(
    IN p_field VARCHAR(20),
    IN p_order VARCHAR(4),
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SET @sql = CONCAT('SELECT student_id, name, dob, email, sex, phone, password, create_at, isActived FROM student WHERE isActived = 1 ORDER BY ', p_field, ' ', p_order, ' LIMIT 5 OFFSET ', v_offset);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

CREATE PROCEDURE count_students()
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM student
    WHERE isActived = 1;
END //

CREATE PROCEDURE count_students_by_name_email_id(
    IN p_search_value VARCHAR(100)
)
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM student
    WHERE isActived = 1
      AND (name LIKE CONCAT('%', p_search_value, '%')
        OR email LIKE CONCAT('%', p_search_value, '%')
        OR student_id = IF(p_search_value REGEXP '^[0-9]+$', CAST(p_search_value AS UNSIGNED), NULL));
END //

CREATE PROCEDURE update_student_password(
    IN p_student_id INT,
    IN p_new_password VARCHAR(255),
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            SET p_success = 0;
            SET p_message = 'Lỗi hệ thống khi cập nhật mật khẩu.';
            ROLLBACK;
        END;

    -- Kiểm tra xem student_id có tồn tại không
    IF NOT EXISTS (SELECT 1 FROM student WHERE student_id = p_student_id) THEN
        SET p_success = 0;
        SET p_message = 'Học viên không tồn tại.';
    ELSE
        -- Cập nhật mật khẩu
        UPDATE student
        SET password = p_new_password
        WHERE student_id = p_student_id;

        SET p_success = 1;
        SET p_message = 'Cập nhật mật khẩu thành công.';
    END IF;
END //


-- check trung email cho dki học viện, thêm học viên cũng như cập nhật học viên

CREATE PROCEDURE check_email_exists(
    IN p_email VARCHAR(100),
    IN p_student_id INT,  -- Nếu là thêm mới, truyền p_student_id = 0; nếu là cập nhật, truyền student_id của học viên
    OUT p_exists BIT
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra email trùng lặp, bỏ qua học viên có student_id được chỉ định
    SELECT COUNT(*) INTO v_count
    FROM student
    WHERE email = p_email AND student_id != p_student_id;

    IF v_count > 0 THEN
        SET p_exists = 1;  -- Email đã tồn tại
    ELSE
        SET p_exists = 0;  -- Email chưa tồn tại
    END IF;
END //
-- Stored Procedures cho Course

CREATE PROCEDURE get_all_courses()
BEGIN
    SELECT course_id, name, duration, instructor, create_at
    FROM course;
END //

CREATE PROCEDURE get_courses_pagination(
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT course_id, name, duration, instructor, create_at
    FROM course
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE add_course(
    IN p_name VARCHAR(100),
    IN p_duration INT,
    IN p_instructor VARCHAR(100),
    IN p_create_at DATE
)
BEGIN
    INSERT INTO course (name, duration, instructor, create_at)
    VALUES (p_name, p_duration, p_instructor, p_create_at);
END //

CREATE PROCEDURE update_course(
    IN p_course_id INT,
    IN p_name VARCHAR(100),
    IN p_duration INT,
    IN p_instructor VARCHAR(100)
)
BEGIN
    UPDATE course
    SET name = p_name, duration = p_duration, instructor = p_instructor
    WHERE course_id = p_course_id;
END //

CREATE PROCEDURE delete_course(
    IN p_course_id INT,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem khóa học có tồn tại không
    SELECT COUNT(*) INTO v_count
    FROM course
    WHERE course_id = p_course_id;

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Không tìm thấy khóa học với ID được chỉ định.';
    ELSE
        -- Kiểm tra xem khóa học có đơn đăng ký không
        SELECT COUNT(*) INTO v_count
        FROM enrollment
        WHERE course_id = p_course_id;

        IF v_count > 0 THEN
            SET p_success = 0;
            SET p_message = 'Không thể xóa khóa học vì có học viên đăng ký.';
        ELSE
            DELETE FROM course
            WHERE course_id = p_course_id;

            IF ROW_COUNT() > 0 THEN
                SET p_success = 1;
                SET p_message = 'Xóa khóa học thành công.';
            ELSE
                SET p_success = 0;
                SET p_message = 'Có lỗi xảy ra khi xóa khóa học.';
            END IF;
        END IF;
    END IF;
END //

CREATE PROCEDURE find_course_by_id(
    IN p_course_id INT
)
BEGIN
    SELECT course_id, name, duration, instructor, create_at
    FROM course
    WHERE course_id = p_course_id;
END //

CREATE PROCEDURE search_courses_by_name_pagination(
    IN p_name VARCHAR(100),
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT course_id, name, duration, instructor, create_at
    FROM course
    WHERE name LIKE CONCAT('%', p_name, '%')
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE sort_courses_pagination(
    IN p_field VARCHAR(20),
    IN p_order VARCHAR(4),
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SET @sql = CONCAT('SELECT course_id, name, duration, instructor, create_at FROM course ORDER BY ', p_field, ' ', p_order, ' LIMIT 5 OFFSET ', v_offset);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

CREATE PROCEDURE count_courses()
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM course;
END //

CREATE PROCEDURE count_courses_by_name(
    IN p_name VARCHAR(100)
)
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM course
    WHERE name LIKE CONCAT('%', p_name, '%');
END //

CREATE PROCEDURE check_course_name_exists(
    IN p_name VARCHAR(100)
)
BEGIN
    SELECT COUNT(*) AS count
    FROM course
    WHERE name = p_name;
END //

CREATE PROCEDURE check_course_name_exists_except_id(
    IN p_name VARCHAR(100),
    IN p_course_id INT
)
BEGIN
    SELECT COUNT(*) AS count
    FROM course
    WHERE name = p_name AND course_id != p_course_id;
END //

-- Stored Procedures cho Enrollment

CREATE PROCEDURE register_course(
    IN p_student_id INT,
    IN p_course_id INT,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra học viên có tồn tại không
    SELECT COUNT(*) INTO v_count
    FROM student
    WHERE student_id = p_student_id AND isActived = 1;

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Học viên không tồn tại hoặc đã bị vô hiệu hóa.';
    ELSE
        SELECT COUNT(*) INTO v_count
        FROM course
        WHERE course_id = p_course_id;

        IF v_count = 0 THEN
            SET p_success = 0;
            SET p_message = 'Không tìm thấy khóa học với ID được chỉ định.';
        ELSE
            SELECT COUNT(*) INTO v_count
            FROM enrollment
            WHERE student_id = p_student_id AND course_id = p_course_id;

            IF v_count > 0 THEN
                SET p_success = 0;
                SET p_message = 'Bạn đã đăng ký khóa học này trước đó.';
            ELSE
                -- Thêm đơn đăng ký mới với trạng thái waiting
                INSERT INTO enrollment (student_id, course_id, registered_at, status)
                VALUES (p_student_id, p_course_id, CURRENT_TIMESTAMP, 'waiting');

                SET p_success = 1;
                SET p_message = 'Đăng ký khóa học thành công. Đơn đăng ký đang chờ xử lý.';
            END IF;
        END IF;
    END IF;
END //

CREATE PROCEDURE get_enrollments_by_student_pagination(
    IN p_student_id INT,
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT e.id, e.student_id, e.course_id, e.registered_at, e.status, c.name AS course_name
    FROM enrollment e
             JOIN course c ON e.course_id = c.course_id
    WHERE e.student_id = p_student_id
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE count_enrollments_by_student(
    IN p_student_id INT
)
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM enrollment
    WHERE student_id = p_student_id;
END //

CREATE PROCEDURE get_waiting_enrollments_by_student(
    IN p_student_id INT
)
BEGIN
    SELECT e.id, e.student_id, e.course_id, e.registered_at, e.status, c.name AS course_name
    FROM enrollment e
             JOIN course c ON e.course_id = c.course_id
    WHERE e.student_id = p_student_id AND e.status = 'waiting';
END //

CREATE PROCEDURE cancel_enrollment(
    IN p_enrollment_id INT,
    IN p_student_id INT,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem đơn đăng ký có tồn tại và thuộc về sinh viên không
    SELECT COUNT(*) INTO v_count
    FROM enrollment
    WHERE id = p_enrollment_id AND student_id = p_student_id AND status = 'waiting';

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Không tìm thấy đơn đăng ký với ID được chỉ định hoặc đơn không ở trạng thái chờ.';
    ELSE
        -- Cập nhật trạng thái thành 'cancel'
        UPDATE enrollment
        SET status = 'cancel'
        WHERE id = p_enrollment_id;

        IF ROW_COUNT() > 0 THEN
            SET p_success = 1;
            SET p_message = 'Hủy đăng ký khóa học thành công.';
        ELSE
            SET p_success = 0;
            SET p_message = 'Có lỗi xảy ra khi hủy đăng ký.';
        END IF;
    END IF;
END //


#=====================Enrollment==================

CREATE PROCEDURE get_confirmed_enrollments_by_course_pagination(
    IN p_course_id INT,
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT id, student_id, course_id, registered_at, status
    FROM enrollment
    WHERE course_id = p_course_id AND status = 'confirm'
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE count_confirmed_enrollments_by_course(
    IN p_course_id INT
)
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM enrollment
    WHERE course_id = p_course_id AND status = 'confirm';
END //

CREATE PROCEDURE get_pending_enrollments()
BEGIN
    SELECT id, student_id, course_id, registered_at, status
    FROM enrollment
    WHERE status = 'waiting';
END //

CREATE PROCEDURE approve_enrollment(
    IN p_enrollment_id INT,
    IN p_action VARCHAR(10),
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem đơn đăng ký có tồn tại và ở trạng thái waiting không
    SELECT COUNT(*) INTO v_count
    FROM enrollment
    WHERE id = p_enrollment_id AND status = 'waiting';

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Không tìm thấy đơn đăng ký với ID được chỉ định hoặc đơn không ở trạng thái chờ.';
    ELSE
        IF p_action = 'approve' THEN
            UPDATE enrollment
            SET status = 'confirm'
            WHERE id = p_enrollment_id;
            SET p_message = 'Duyệt đơn đăng ký thành công.';
        ELSEIF p_action = 'deny' THEN
            UPDATE enrollment
            SET status = 'denied'
            WHERE id = p_enrollment_id;
            SET p_message = 'Từ chối đơn đăng ký thành công.';
        ELSE
            SET p_success = 0;
            SET p_message = 'Hành động không hợp lệ. Vui lòng chọn "approve" hoặc "deny".';
            SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = p_message;
        END IF;

        IF ROW_COUNT() > 0 THEN
            SET p_success = 1;
        ELSE
            SET p_success = 0;
            SET p_message = 'Có lỗi xảy ra khi xử lý đơn đăng ký.';
        END IF;
    END IF;
END //

CREATE PROCEDURE get_denied_cancel_enrollments_by_course_pagination(
    IN p_course_id INT,
    IN p_page INT
)
BEGIN
    DECLARE v_offset INT;
    SET v_offset = (p_page - 1) * 5;
    SELECT id, student_id, course_id, registered_at, status
    FROM enrollment
    WHERE course_id = p_course_id AND status IN ('denied', 'cancel')
    LIMIT 5 OFFSET v_offset;
END //

CREATE PROCEDURE count_denied_cancel_enrollments_by_course(
    IN p_course_id INT
)
BEGIN
    SELECT CEIL(COUNT(*) / 5.0) AS total_pages
    FROM enrollment
    WHERE course_id = p_course_id AND status IN ('denied', 'cancel');
END //

CREATE PROCEDURE delete_enrollment(
    IN p_course_id INT,
    IN p_student_id INT,
    OUT p_success BIT,
    OUT p_message VARCHAR(255)
)
BEGIN
    DECLARE v_count INT;

    -- Kiểm tra xem đơn đăng ký có tồn tại và ở trạng thái confirm không
    SELECT COUNT(*) INTO v_count
    FROM enrollment
    WHERE course_id = p_course_id AND student_id = p_student_id AND status in ('cancel', 'denied');

    IF v_count = 0 THEN
        SET p_success = 0;
        SET p_message = 'Không tìm thấy đơn đăng ký với thông tin được chỉ định hoặc đơn không ở trạng thái đã xác nhận.';
    ELSE
        -- Xóa đơn đăng ký
        DELETE FROM enrollment
        WHERE course_id = p_course_id AND student_id = p_student_id;

        IF ROW_COUNT() > 0 THEN
            SET p_success = 1;
            SET p_message = 'Xóa đơn đăng ký thành công.';
        ELSE
            SET p_success = 0;
            SET p_message = 'Có lỗi xảy ra khi xóa đơn đăng ký.';
        END IF;
    END IF;
END //


#===============THONG KE===============

CREATE PROCEDURE get_total_courses_and_students(
    OUT p_total_courses INT,
    OUT p_total_students INT
)
BEGIN
    -- Đếm tổng số khóa học
    SELECT COUNT(*) INTO p_total_courses
    FROM course;

    SELECT COUNT(DISTINCT student_id) INTO p_total_students
    FROM enrollment
    WHERE status = 'confirm';
END //

CREATE PROCEDURE get_students_per_course()
BEGIN
    SELECT
        c.course_id AS course_id,
        c.name AS course_name,
        COUNT(DISTINCT e.student_id) AS student_count
    FROM course c
             LEFT JOIN enrollment e ON c.course_id = e.course_id AND e.status = 'confirm'
    GROUP BY c.course_id, c.name
    ORDER BY c.course_id;
END //

CREATE PROCEDURE get_top_5_courses_by_students()
BEGIN
    SELECT
        c.course_id AS course_id,
        c.name AS course_name,
        COUNT(DISTINCT e.student_id) AS student_count
    FROM course c
             LEFT JOIN enrollment e ON c.course_id = e.course_id AND e.status = 'confirm'
    GROUP BY c.course_id, c.name
    ORDER BY student_count DESC
    LIMIT 5;
END //

CREATE PROCEDURE get_courses_with_more_than_10_students()
BEGIN
    SELECT
        c.course_id AS course_id,
        c.name AS course_name,
        COUNT(DISTINCT e.student_id) AS student_count
    FROM course c
             LEFT JOIN enrollment e ON c.course_id = e.course_id AND e.status = 'confirm'
    GROUP BY c.course_id, c.name
    HAVING student_count > 10
    ORDER BY student_count DESC;
END //

DELIMITER ;

INSERT INTO admin (username, password)
VALUES ('admin01', '123456');

INSERT INTO student (name, dob, email, sex, phone, password)
VALUES
    ('Nguyen Van A', '2002-05-01', 'vana@gmail.com', 1, '0912345678', 'abc123'),
    ('Le Thi B', '2002-05-01', 'le.b@example.com', 0, '0901111111', 'pass123'),
    ('Tran Van C', '2001-06-15', 'tran.c@example.com', 1, '0902222222', 'pass123'),
    ('Pham Thi D', '2003-07-20', 'pham.d@example.com', 0, '0903333333', 'pass123'),
    ('Nguyen Van E', '2000-08-25', 'nguyen.e@example.com', 1, '0904444444', 'pass123'),
    ('Hoang Thi F', '2002-09-30', 'hoang.f@example.com', 0, '0905555555', 'pass123'),
    ('Bui Van G', '2001-10-10', 'bui.g@example.com', 1, '0906666666', 'pass123'),
    ('Do Thi H', '2003-11-11', 'do.h@example.com', 0, '0907777777', 'pass123'),
    ('Vo Van I', '2000-12-12', 'vo.i@example.com', 1, '0908888888', 'pass123'),
    ('Dang Thi J', '2002-01-13', 'dang.j@example.com', 0, '0909999999', 'pass123'),
    ('Mai Van K', '2001-02-14', 'mai.k@example.com', 1, '0910000000', 'pass123'),
    ('Tran Thi L', '2003-03-15', 'tran.l@example.com', 0, '0911111111', 'pass123'),
    ('Ngo Van M', '2000-04-16', 'ngo.m@example.com', 1, '0912222222', 'pass123'),
    ('Nguyen Thi N', '2002-05-17', 'nguyen.n@example.com', 0, '0913333333', 'pass123'),
    ('Le Van O', '2001-06-18', 'le.o@example.com', 1, '0914444444', 'pass123'),
    ('Pham Thi P', '2003-07-19', 'pham.p@example.com', 0, '0915555555', 'pass123'),
    ('Hoang Van Q', '2000-08-20', 'hoang.q@example.com', 1, '0916666666', 'pass123'),
    ('Bui Thi R', '2002-09-21', 'bui.r@example.com', 0, '0917777777', 'pass123'),
    ('Do Van S', '2001-10-22', 'do.s@example.com', 1, '0918888888', 'pass123'),
    ('Vo Thi T', '2003-11-23', 'vo.t@example.com', 0, '0919999999', 'pass123'),
    ('Dang Van U', '2000-12-24', 'dang.u@example.com', 1, '0920000000', 'pass123'),
    ('Le Tien', '2005-07-28', 'tien@example.com', 1, '0912664172', 'pass123');

INSERT INTO course (name, duration, instructor, create_at)
VALUES
    ('Java Programming', 30, 'Dr. Smith', '2025-01-01'),
    ('Python Basics', 20, 'Prof. Johnson', '2025-01-02'),
    ('Web Development', 25, 'Ms. Brown', '2025-01-03'),
    ('Database Systems', 35, 'Mr. Lee', '2025-01-04'),
    ('Machine Learning', 40, 'Dr. Kim', '2025-01-05'),
    ('Data Science', 28, 'Prof. Davis', '2025-01-06'),
    ('Cloud Computing', 32, 'Ms. Wilson', '2025-01-07');

INSERT INTO enrollment (student_id, course_id, registered_at, status)
VALUES
    (1, 1, NOW(), 'confirm'),
    (1, 2, NOW(), 'waiting'),
    (2, 1, NOW(), 'confirm'),
    (3, 2, NOW(), 'confirm'),
    (4, 3, NOW(), 'cancel'),
    (5, 4, NOW(), 'confirm'),
    (6, 5, NOW(), 'waiting'),
    (7, 6, NOW(), 'confirm'),
    (8, 7, NOW(), 'waiting'),
    (9, 1, NOW(), 'confirm'),
    (10, 2, NOW(), 'confirm'),
    (11, 3, NOW(), 'waiting'),
    (12, 4, NOW(), 'confirm'),
    (13, 5, NOW(), 'denied'),
    (14, 6, NOW(), 'confirm'),
    (15, 7, NOW(), 'waiting'),
    (16, 1, NOW(), 'confirm'),
    (17, 2, NOW(), 'cancel'),
    (18, 3, NOW(), 'confirm'),
    (19, 4, NOW(), 'waiting'),
    (20, 5, NOW(), 'confirm'),
    (21, 6, NOW(), 'waiting');


# SELECT * FROM enrollment WHERE student_id = 23;
#
# SET @success = 0;
# SET @message = '';
# CALL delete_student(23, @success, @message);
# SELECT @success, @message;

# drop database course_management_system;